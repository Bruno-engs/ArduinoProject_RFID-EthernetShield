//Bibliotecas
#include <SPI.h>
#include <MFRC522.h>
#include <Ethernet.h>
//Pinos
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

#define SS_PIN 9 // responsavel pelo Leitor
#define RST_PIN 8  // responsael pelo reset
String IDtag = ""; //Variável que armazenará o ID da Tag
bool Acesso = false; //Variável que verifica a permissão 
//Vetor responsável por armazenar os ID's das Tag's cadastradas
String TagsCadastradas[] = {"89a7298", 
                            "bbce8c1",
                            "576eb94d"};
MFRC522 LeitorRFID(SS_PIN, RST_PIN);    // Cria uma nova instância para o leitor e passa os pinos como parâmetro
void setup() {
        Serial.begin(9600);             // Inicializa a comunicação Serial
        SPI.begin();                    // Inicializa comunicacao SPI 
        LeitorRFID.PCD_Init();          // Inicializa o leitor RFID
    
}
void loop() {  
  Leitura();  //Chama a função responsável por fazer a leitura das Tag's
}
void Leitura(){
        IDtag = ""; //Inicialmente IDtag deve estar vazia.
        
        // Verifica se existe uma Tag presente
        if ( !LeitorRFID.PICC_IsNewCardPresent() || !LeitorRFID.PICC_ReadCardSerial() ) {
            delay(50);
            return;
        }
        
        // Pega o ID da Tag através da função LeitorRFID.uid e Armazena o ID na variável IDtag        
        for (byte i = 0; i < LeitorRFID.uid.size; i++) {        
            IDtag.concat(String(LeitorRFID.uid.uidByte[i], HEX));//Imprime o valor do RFID a ser cadastrado no array
        }        
        //Compara o valor do ID lido com os IDs armazenados no vetor TagsCadastradas[]
        for (int i = 0; i < (sizeof(TagsCadastradas)/sizeof(String)); i++) {
          if(  IDtag.equalsIgnoreCase(TagsCadastradas[i])  ){
              Acesso = true; //Variável Acesso assume valor verdadeiro caso o ID Lido esteja cadastrado
          }
        }       
        if(Acesso == true) acessoLiberado(); //Se a variável Acesso for verdadeira será chamada a função acessoLiberado()        
        else acessoNegado(); //Se não será chamada a função acessoNegado()
        delay(2000); //aguarda 2 segundos para efetuar uma nova leitura
}
void acessoLiberado(){
  Serial.println("Tag Cadastrada: " + IDtag + " ENTROU/SAIU"); //Exibe a mensagem "Tag Cadastrada" e o ID da tag não cadastrada
    Acesso = false;  //Seta a variável Acesso como false novamente
    Ethernet.init(10);           // inicia i ethernet shield
    

}
void acessoNegado(){
  Serial.println("Tag INTRUSA: " + IDtag); //Exibe a mensagem "Tag NAO Cadastrada" e o ID da tag cadastrada
}